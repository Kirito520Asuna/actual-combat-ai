package ${packageName}.domain;

#foreach ($import in $importList)
import ${import};
#end
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableName;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;
import lombok.experimental.SuperBuilder;
import io.swagger.v3.oas.annotations.media.Schema;

#if($table.isCrud() || $table.isSub())
#elseif($table.isTree())
import com.minimalism.aop.all.tree.Tree;
#end
import static ${packageName}.domain.${ClassName}.TABLE_$tableName.toUpperCase();
/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
#set($Entity="")
#set($fieldList = [])
#if($table.isCrud() || $table.isSub())
    #set($Entity="BaseEntity")
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("createBy")))
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("createTime")))
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("updateBy")))
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("updateTime")))
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("remark")))
#elseif($table.isTree())
    #set($Entity="TreeEntity")
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("parentName")))
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("parentId")))
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("orderNum")))
    #set($dummy = $fieldList.add($StrUtils.toCamelCase("ancestors")))
#end
@Schema(description="$table.tableComment")
@EqualsAndHashCode(callSuper=true)
@Data @Accessors(chain = true) @SuperBuilder
@AllArgsConstructor @NoArgsConstructor
@TableName(value = TABLE_$tableName.toUpperCase())
public class ${ClassName} #if($StrUtils.isNotBlank($Entity))extends ${Entity}#end implements Serializable{

    private static final long serialVersionUID = 1L;
#foreach ($column in $columns)
   #if(!$CollUtil.contains($fieldList,$StrUtils.toCamelCase($column.columnName)))
    #if($column.list)
    #set($parentheseIndex=$column.columnComment.indexOf("（"))
    #if($parentheseIndex != -1)
    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
    #else
    #set($comment=$column.columnComment)
    #end
##    #if($parentheseIndex != -1)
##        @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
##    #elseif($column.javaType == 'Date'|| $column.javaType == 'LocalDateTime')
##        @JsonFormat(pattern = "yyyy-MM-dd")
##        @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
##    #else
##        @Excel(name = "${comment}")
##    #end
    #end
    /**
    * ${column.columnComment}
    */
    #if($table.isTree() && $column.isPk())
    @Tree(id = true)
    #elseif($table.isTree() && $column.isParentId())
    @Tree(parentId = true)
    #end
    #if($column.isPk())
    ##@TableId(value = "`$column.columnName`", type = IdType.AUTO)
@TableId(value = COL_$column.columnName.toUpperCase(), type = IdType.AUTO)
    #else
    ##@TableField(value = "`$column.columnName`")
@TableField(value = COL_$column.columnName.toUpperCase())
    #end
    @Schema(description = "$column.columnComment")
    private $column.javaType $column.javaField;
   #end
#end
#if($table.isTree())
    @Tree(subset = true)
    private List<${ClassName}> ${className}Children = new ArrayList<>();
#end
#if($table.isSub())
    /**
    * $table.subTable.functionName 信息
    */
    private List<${subClassName}> ${subclassName}List = new ArrayList<>();
#end

    public static final String TABLE_$tableName.toUpperCase() = "$tableName";
#foreach ($column in $columns)
#if(!$CollUtil.contains($fieldList,$StrUtils.toCamelCase($column.columnName)))
    public static final String COL_$column.columnName.toUpperCase() = "$column.columnName";
#end
#end
}
