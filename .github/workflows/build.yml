# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Java Jar To Zip Publish
run-name: "Jar ${{ github.event.inputs.tag_name || github.ref_name || 'v-manual' }} version"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: '输入 Release 标签 (eg: v0.35.1, v0.36.5-alpha.1)'
        required: false
        type: string
        #default: 'v-manual'
      skip_tests:
        description: '是否跳过测试 (true/false)'
        required: true
        type: boolean
        default: false
      java_version:
        description: '输入 Java 版本 (如 8, 11, 17)'
        required: true
        default: '8'
      jar_dir_prefix:
        description: 'JAR 文件前缀 (如 micro-service 或留空)'
        default: ''
      draft:
        description: '是否为草稿 Release (true/false)'
        type: boolean
        default: false
      prerelease:
        description: '是否为预发布 Release (true/false)'
        type: boolean
        default: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      #releases: write
      actions: read
    steps:
      - name: 1.检出代码
        uses: actions/checkout@v4

      - name: 2.验证版本号
        run: |
            TAG_NAME="${{ github.event.inputs.tag_name || github.ref_name}}"
            echo "当前版本号: $TAG_NAME"
            if ! [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
              echo "❌ 错误：版本格式必须符合语义化版本规范 (例如: 1.2.3, 1.2.3-alpha, 1.2.3+build.123)"
              exit 1
            fi
            echo "版本号验证通过"

      - name: 3.设置 Java 环境 version=${{ github.event.inputs.java_version}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ github.event.inputs.java_version}}
          distribution: 'temurin'

      - name: 4.缓存 Maven 依赖
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 5.使用 Maven 构建并生成 JAR
        run: |
          if [ "${{ inputs.skip_tests }}" = "true" ]; then
            echo "跳过测试"
            echo "mvn clean package -B -DskipTests -Dquickly"
            mvn clean package -B -DskipTests -Dquickly
          else
            echo "mvn clean package -B -Dquickly"
            mvn clean package -B -Dquickly
          fi
          echo "Maven 构建完成"

      - name: 6.列出匹配的 JAR 文件
        run: |
          if [ "${{ inputs.jar_dir_prefix }}" = "" ]; then
            echo "匹配的 JAR 文件 (*/target/*.jar):"
            find . -type f -path "*/target/*.jar" || echo "未找到匹配的 JAR 文件"
          else
            echo "匹配的 JAR 文件 (*/${{ inputs.jar_dir_prefix }}/*/target/*.jar):"
            find . -type f -path "*/${{ inputs.jar_dir_prefix }}/*/target/*.jar" || echo "未找到匹配的 JAR 文件"
          fi

      - name: 7.打包所有 JAR 文件成 ZIP
        run: |
          if [ "${{ inputs.jar_dir_prefix }}" = "" ]; then
            find . -type f -path "*/target/*.jar" -exec zip -j jars-${{ github.event.inputs.tag_name || github.ref_name }}.zip {} +
          else
            find . -type f -path "*/${{ inputs.jar_dir_prefix }}/*/target/*.jar" -exec zip -j jars-${{ github.event.inputs.tag_name || github.ref_name }}.zip {} +
          fi
          # -j: 仅打包文件，不保留目录结构
          # +: 尽量将多个文件放入一个 zip 命令，减少调用次数
        shell: bash

      - name: 8.验证 ZIP 文件
        run: |
          ls -la jars-${{ github.event.inputs.tag_name || github.ref_name }}.zip
          echo "ZIP 文件内容:"
          unzip -l jars-${{ github.event.inputs.tag_name || github.ref_name }}.zip

      - name: 9.解压 ZIP 文件
        run: |
          mkdir -p extracted-jars
          unzip jars-${{ github.event.inputs.tag_name || github.ref_name }}.zip -d extracted-jars
          echo "解压后的文件:"
          ls -la extracted-jars

      - name: 10.上传 ZIP 到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            jars-${{ github.event.inputs.tag_name || github.ref_name }}.zip
            extracted-jars/*.jar
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          name: Release ${{ github.event.inputs.tag_name || github.ref_name }} ${{ github.event.inputs.draft == 'true' && '(Draft)' || '' }} ${{ github.event.inputs.prerelease == 'true' && '(Pre-release)' || '' }}
          body: |
            **Release 信息**
            - 标签: ${{ github.event.inputs.tag_name || github.ref_name }}
            - Java 版本: ${{ github.event.inputs.java_version}}
#            - 是否跳过测试: ${{ github.event.inputs.skip_tests == 'true' && '是' || '否' }}
#            - Draft 状态: ${{ github.event.inputs.draft == 'true' && '是' || '否' }}
#            - Pre-release 状态: ${{ github.event.inputs.prerelease == 'true' && '是' || '否' }}
          draft: ${{ github.event.inputs.draft == 'true' || false }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' || false }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
